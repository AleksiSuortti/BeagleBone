#include <iostream>
#include <fstream>
#include <bitset>
#include <iomanip>  // For formatting hex output

// Function to rotate an 8x8 matrix 90 degrees counter-clockwise
void rotateMatrix90CounterClockwise(const uint8_t input[8], uint8_t output[8]) {
    for (int col = 0; col < 8; ++col) {
        output[col] = 0; // Initialize the output byte
        for (int row = 0; row < 8; ++row) {
            // Extract bit from input[row] and set it in the output[col]
            output[col] |= ((input[row] >> (7 - col)) & 1) << row;
        }
    }
}

// Function to rotate the entire array of bytes
void rotateArray90CounterClockwise(uint8_t* data, size_t size) {
    size_t numMatrices = size / 8;  // Number of 8-byte blocks (matrices)
    uint8_t rotatedData[size];       // New array to hold rotated data

    for (size_t i = 0; i < numMatrices; ++i) {
        uint8_t matrix[8];        // Temporary 8-byte matrix to rotate
        uint8_t rotatedMatrix[8];  // Rotated matrix

        // Copy the current 8-byte block (matrix)
        for (int j = 0; j < 8; ++j) {
            matrix[j] = data[i * 8 + j];
        }

        // Rotate the 8x8 matrix 90 degrees counter-clockwise
        rotateMatrix90CounterClockwise(matrix, rotatedMatrix);

        // Place the rotated matrix back into the new array
        for (int j = 0; j < 8; ++j) {
            rotatedData[i * 8 + j] = rotatedMatrix[j];
        }
    }

    // Copy rotated data back to the original array
    for (size_t i = 0; i < size; ++i) {
        data[i] = rotatedData[i];
    }
}

// Function to print an 8-byte bitmap (for verification)
void printBitmap(const uint8_t bitmap[8]) {
    for (int i = 0; i < 8; ++i) {
        std::cout << std::bitset<8>(bitmap[i]) << std::endl;
    }
}

// Function to write the rotated array to a file
void writeToFile(const uint8_t* data, size_t size, const std::string& filename) {
    std::ofstream outFile(filename, std::ios::out);

    if (!outFile) {
        std::cerr << "Error opening file for writing." << std::endl;
        return;
    }

    // Write data to file in the format you want
    for (size_t i = 0; i < size; i++) {
        outFile << "0x" << std::setw(2) << std::setfill('0') << std::hex << (int)data[i];

        // After every 8 bytes, insert a newline
        if ((i + 1) % 8 == 0) {
            outFile << "," << std::endl;
        } else {
            outFile << ",";
        }
    }

    // Close the file
    outFile.close();
    std::cout << "Data successfully written to " << filename << std::endl;
}

int main() {
    uint8_t data[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x70,0xa8,0xf8,0xd8,0x70,0x00,
0x00,0x00,0x70,0xa8,0xf8,0xf8,0x70,0x00,
0x00,0x00,0x50,0xf8,0xf8,0x70,0x20,0x00,
0x00,0x00,0x20,0x70,0xf8,0x70,0x20,0x00,
0x00,0x00,0x70,0xa8,0xf8,0x20,0x20,0x00,
0x00,0x00,0x20,0x70,0xf8,0xa8,0x20,0x00,
0x00,0x00,0x00,0x20,0x70,0x20,0x00,0x00,
0x00,0xf8,0xf8,0xd8,0x88,0xd8,0xf8,0xf8,
0x00,0x00,0x00,0x20,0x50,0x20,0x00,0x00,
0x00,0xf8,0xf8,0xd8,0x88,0xd8,0xf8,0xf8,
0x00,0x00,0x38,0x18,0x68,0xa0,0x40,0x00,
0x00,0x00,0x20,0x50,0x20,0x70,0x20,0x00,
0x00,0x00,0x20,0x50,0x40,0xc0,0x80,0x00,
0x00,0x00,0x38,0x48,0x58,0xd0,0x80,0x00,
0x00,0x00,0x00,0x20,0x50,0x20,0x00,0x00,
0x00,0x00,0x40,0x60,0x70,0x60,0x40,0x00,
0x00,0x00,0x10,0x30,0x70,0x30,0x10,0x00,
0x00,0x00,0x20,0x70,0x20,0x70,0x20,0x00,
0x00,0x00,0x50,0x50,0x50,0x00,0x50,0x00,
0x00,0x00,0x78,0xd0,0xd0,0x50,0x50,0x50,
0x00,0x00,0x18,0x60,0x90,0x48,0x30,0xc0,
0x00,0x00,0x00,0x00,0x00,0xf8,0xf8,0x00,
0x00,0x00,0x20,0x70,0x20,0x70,0x20,0x70,
0x00,0x00,0x20,0x70,0x20,0x20,0x20,0x00,
0x00,0x00,0x20,0x20,0x20,0x70,0x20,0x00,
0x00,0x00,0x00,0x10,0xf8,0x10,0x00,0x00,
0x00,0x00,0x00,0x40,0xf8,0x40,0x00,0x00,
0x00,0x00,0x00,0x00,0x80,0xf8,0x00,0x00,
0x00,0x00,0x00,0x50,0xf8,0x50,0x00,0x00,
0x00,0x00,0x00,0x00,0x20,0x70,0xf8,0x00,
0x00,0x00,0x00,0x00,0xf8,0x70,0x20,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x20,0x20,0x20,0x00,0x20,0x00,
0x00,0x00,0x50,0x50,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0xf8,0x50,0xf8,0x50,0x00,
0x00,0x00,0x20,0x30,0x40,0x30,0x60,0x20,
0x00,0x40,0xa8,0x50,0x30,0x68,0x90,0x00,
0x00,0x00,0x30,0x40,0x68,0x90,0x68,0x00,
0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x20,0x40,0x40,0x40,0x20,0x00,
0x00,0x00,0x40,0x20,0x20,0x20,0x40,0x00,
0x00,0x00,0x50,0x20,0x70,0x20,0x50,0x00,
0x00,0x00,0x00,0x20,0x70,0x20,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,
0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,
0x00,0x00,0x10,0x20,0x20,0x40,0x40,0x00,
0x00,0x00,0x60,0x90,0x90,0x90,0x60,0x00,
0x00,0x00,0x20,0x60,0x20,0x20,0x20,0x00,
0x00,0x00,0x60,0x90,0x20,0x40,0xf0,0x00,
0x00,0x00,0xe0,0x10,0x60,0x10,0xe0,0x00,
0x00,0x00,0x10,0x30,0x50,0xf0,0x10,0x00,
0x00,0x00,0xf0,0x80,0xe0,0x10,0xe0,0x00,
0x00,0x00,0x60,0x80,0xe0,0x90,0x60,0x00,
0x00,0x00,0xf0,0x10,0x20,0x40,0x40,0x00,
0x00,0x00,0x60,0x90,0x60,0x90,0x60,0x00,
0x00,0x00,0x60,0x90,0x70,0x10,0x60,0x00,
0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x00,
0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x40,
0x00,0x00,0x10,0x20,0x40,0x20,0x10,0x00,
0x00,0x00,0x00,0x70,0x00,0x70,0x00,0x00,
0x00,0x00,0x40,0x20,0x10,0x20,0x40,0x00,
0x00,0x00,0x60,0x10,0x60,0x00,0x40,0x00,
0x00,0x00,0x70,0x88,0xb0,0x80,0x70,0x00,
0x00,0x00,0x60,0x90,0xf0,0x90,0x90,0x00,
0x00,0x00,0xe0,0x90,0xe0,0x90,0xe0,0x00,
0x00,0x00,0x70,0x80,0x80,0x80,0x70,0x00,
0x00,0x00,0xe0,0x90,0x90,0x90,0xe0,0x00,
0x00,0x00,0xf0,0x80,0xe0,0x80,0xf0,0x00,
0x00,0x00,0xf0,0x80,0xe0,0x80,0x80,0x00,
0x00,0x00,0x60,0x90,0x80,0x90,0x70,0x00,
0x00,0x00,0x90,0x90,0xf0,0x90,0x90,0x00,
0x00,0x00,0x70,0x20,0x20,0x20,0x70,0x00,
0x00,0x00,0x10,0x10,0x90,0x90,0x60,0x00,
0x00,0x00,0x90,0xa0,0xc0,0xa0,0x90,0x00,
0x00,0x00,0x80,0x80,0x80,0x80,0xf0,0x00,
0x00,0x00,0x90,0x90,0xf0,0x90,0x90,0x00,
0x00,0x00,0x90,0xd0,0xb0,0x90,0x90,0x00,
0x00,0x00,0x60,0x90,0x90,0x90,0x60,0x00,
0x00,0x00,0xe0,0x90,0xe0,0x80,0x80,0x00,
0x00,0x00,0x60,0x90,0x90,0x90,0x60,0x10,
0x00,0x00,0xe0,0x90,0xe0,0x90,0x90,0x00,
0x00,0x00,0x70,0x80,0x60,0x10,0xe0,0x00,
0x00,0x00,0xf8,0x20,0x20,0x20,0x20,0x00,
0x00,0x00,0x90,0x90,0x90,0x90,0x60,0x00,
0x00,0x00,0x90,0x90,0x90,0x60,0x60,0x00,
0x00,0x00,0x88,0xa8,0xa8,0x50,0x50,0x00,
0x00,0x00,0x90,0x90,0x60,0x50,0x90,0x00,
0x00,0x00,0x50,0x50,0x50,0x20,0x20,0x00,
0x00,0x00,0xf0,0x20,0x40,0x80,0xf0,0x00,
0x00,0x00,0x60,0x40,0x40,0x40,0x60,0x00,
0x00,0x00,0x40,0x40,0x20,0x20,0x10,0x00,
0x00,0x00,0x60,0x20,0x20,0x20,0x60,0x00,
0x00,0x00,0x20,0x50,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,
0x00,0x00,0x40,0x20,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x60,0x10,0x70,0x50,0x00,
0x00,0x80,0x80,0xe0,0x90,0x90,0xe0,0x00,
0x00,0x00,0x00,0x30,0x40,0x40,0x30,0x00,
0x00,0x00,0x10,0x70,0x90,0x90,0x70,0x00,
0x00,0x00,0x00,0x60,0xf0,0x80,0x70,0x00,
0x00,0x00,0x30,0x40,0xe0,0x40,0x40,0x00,
0x00,0x00,0x00,0x70,0x90,0x70,0x10,0x60,
0x00,0x00,0x80,0xe0,0x90,0x90,0x90,0x00,
0x00,0x20,0x00,0x60,0x20,0x20,0x70,0x00,
0x00,0x10,0x00,0x10,0x10,0x10,0x10,0x60,
0x00,0x00,0x80,0xa0,0xc0,0xa0,0x90,0x00,
0x00,0x60,0x20,0x20,0x20,0x20,0x70,0x00,
0x00,0x00,0x00,0x90,0xf0,0x90,0x90,0x00,
0x00,0x00,0x00,0xe0,0x90,0x90,0x90,0x00,
0x00,0x00,0x00,0x60,0x90,0x90,0x60,0x00,
0x00,0x00,0x00,0xe0,0x90,0x90,0xe0,0x80,
0x00,0x00,0x00,0x70,0x90,0x90,0x70,0x10,
0x00,0x00,0x00,0x50,0x60,0x40,0x40,0x00,
0x00,0x00,0x00,0x70,0xc0,0x30,0xe0,0x00,
0x00,0x00,0x40,0xf0,0x40,0x40,0x30,0x00,
0x00,0x00,0x00,0x90,0x90,0x90,0x70,0x00,
0x00,0x00,0x00,0x90,0x90,0x60,0x60,0x00,
0x00,0x00,0x00,0x90,0x90,0xf0,0x90,0x00,
0x00,0x00,0x00,0x90,0x60,0x60,0x90,0x00,
0x00,0x00,0x00,0x90,0x90,0x70,0x10,0x60,
0x00,0x00,0x00,0xf0,0x20,0x40,0xf0,0x00,
0x00,0x10,0x20,0x40,0x40,0x20,0x10,0x00,
0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x00,
0x00,0x40,0x20,0x10,0x10,0x20,0x40,0x00,
0x00,0x00,0x00,0x50,0xa0,0x00,0x00,0x00,
0x00,0x00,0x00,0x20,0x50,0x88,0xf8,0x00,
0x00,0x00,0x70,0x80,0x80,0x80,0x70,0x20,
0x00,0x50,0x00,0x90,0x90,0x90,0x70,0x00,
0x10,0x20,0x00,0x60,0xf0,0x80,0x70,0x00,
0x20,0x50,0x00,0xc0,0x20,0xa0,0x50,0x00,
0x00,0x50,0x00,0xc0,0x20,0x60,0xb0,0x00,
0x40,0x20,0x00,0xc0,0x20,0x60,0xb0,0x00,
0x00,0x20,0x00,0xc0,0x20,0x60,0xb0,0x00,
0x00,0x00,0x00,0x30,0x40,0x40,0x30,0x20,
0x20,0x50,0x00,0x60,0xf0,0x80,0x70,0x00,
0x00,0x50,0x00,0x60,0xf0,0x80,0x70,0x00,
0x40,0x20,0x00,0x60,0xf0,0x80,0x70,0x00,
0x00,0x50,0x00,0x60,0x20,0x20,0x70,0x00,
0x20,0x50,0x00,0x60,0x20,0x20,0x70,0x00,
0x40,0x20,0x00,0x60,0x20,0x20,0x70,0x00,
0xa0,0x00,0x60,0x90,0xf0,0x90,0x90,0x00,
0x20,0x00,0x60,0x90,0xf0,0x90,0x90,0x00,
0x10,0x20,0xf0,0x80,0xe0,0x80,0xf0,0x00,
0x00,0x00,0x00,0xd8,0x78,0xe0,0xb8,0x00,
0x00,0x00,0x70,0xa0,0xf0,0xa0,0xb0,0x00,
0x20,0x50,0x00,0x60,0x90,0x90,0x60,0x00,
0x00,0x50,0x00,0x60,0x90,0x90,0x60,0x00,
0x40,0x20,0x00,0x60,0x90,0x90,0x60,0x00,
0x20,0x50,0x00,0x90,0x90,0x90,0x70,0x00,
0x40,0x20,0x00,0x90,0x90,0x90,0x70,0x00,
0x00,0x50,0x00,0x90,0x90,0x70,0x10,0x60,
0x00,0x50,0x00,0x60,0x90,0x90,0x60,0x00,
0x50,0x00,0x90,0x90,0x90,0x90,0x60,0x00,
0x00,0x00,0x20,0x70,0x80,0x80,0x70,0x20,
0x00,0x30,0x50,0x40,0xe0,0x40,0xf0,0x00,
0x00,0xd8,0x50,0x50,0x20,0x70,0x20,0x00,
0x00,0xc0,0xa0,0xb0,0xf8,0x90,0x88,0x00,
0x00,0x30,0x40,0x40,0xf0,0x40,0x40,0x80,
0x20,0x40,0x00,0xc0,0x20,0x60,0xb0,0x00,
0x10,0x20,0x00,0x60,0x20,0x20,0x70,0x00,
0x10,0x20,0x00,0x60,0x90,0x90,0x60,0x00,
0x10,0x20,0x00,0x90,0x90,0x90,0x70,0x00,
0x50,0xa0,0x00,0xe0,0x90,0x90,0x90,0x00,
0x50,0xa0,0x90,0xd0,0xd0,0xb0,0x90,0x00,
0x00,0x20,0x50,0x30,0x00,0x70,0x00,0x00,
0x00,0x20,0x50,0x20,0x00,0x70,0x00,0x00,
0x00,0x20,0x00,0x20,0x40,0x90,0x60,0x00,
0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0xf8,0x08,0x00,
0x00,0x80,0x90,0xa0,0x58,0x88,0x38,0x00,
0x00,0x88,0x90,0xa0,0x48,0x98,0x38,0x08,
0x00,0x20,0x00,0x20,0x20,0x70,0x20,0x00,
0x00,0x00,0x00,0x00,0x50,0xa0,0x50,0x00,
0x00,0x00,0x00,0x00,0xa0,0x50,0xa0,0x00,
0xa8,0x50,0xa8,0x50,0xa8,0x50,0xa8,0x50,
0xe8,0x50,0xb8,0x50,0xe8,0x50,0xb8,0x50,
0xd8,0x70,0xd8,0x70,0xd8,0x70,0xd8,0x70,
0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
0x20,0x20,0x20,0xe0,0x20,0x20,0x20,0x20,
0x20,0x20,0xe0,0x20,0xe0,0x20,0x20,0x20,
0x50,0x50,0x50,0xd0,0x50,0x50,0x50,0x50,
0x00,0x00,0x00,0xf0,0x50,0x50,0x50,0x50,
0x00,0x00,0xe0,0x20,0xe0,0x20,0x20,0x20,
0x50,0x50,0xd0,0x10,0xd0,0x50,0x50,0x50,
0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
0x00,0x00,0xf0,0x10,0xd0,0x50,0x50,0x50,
0x50,0x50,0xd0,0x10,0xf0,0x00,0x00,0x00,
0x50,0x50,0x50,0xf0,0x00,0x00,0x00,0x00,
0x20,0x20,0xe0,0x20,0xe0,0x00,0x00,0x00,
0x00,0x00,0x00,0xe0,0x20,0x20,0x20,0x20,
0x20,0x20,0x20,0x38,0x00,0x00,0x00,0x00,
0x20,0x20,0x20,0xf8,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xf8,0x20,0x20,0x20,0x20,
0x20,0x20,0x20,0x38,0x20,0x20,0x20,0x20,
0x00,0x00,0x00,0xf8,0x00,0x00,0x00,0x00,
0x20,0x20,0x20,0xf8,0x20,0x20,0x20,0x20,
0x20,0x20,0x38,0x20,0x38,0x20,0x20,0x20,
0x50,0x50,0x50,0x58,0x50,0x50,0x50,0x50,
0x50,0x50,0x58,0x40,0x78,0x00,0x00,0x00,
0x00,0x00,0x78,0x40,0x58,0x50,0x50,0x50,
0x50,0x50,0xd8,0x00,0xf8,0x00,0x00,0x00,
0x00,0x00,0xf8,0x00,0xd8,0x50,0x50,0x50,
0x50,0x50,0x58,0x40,0x58,0x50,0x50,0x50,
0x00,0x00,0xf8,0x00,0xf8,0x00,0x00,0x00,
0x50,0x50,0xd8,0x00,0xd8,0x50,0x50,0x50,
0x20,0x20,0xf8,0x00,0xf8,0x00,0x00,0x00,
0x50,0x50,0x50,0xf8,0x00,0x00,0x00,0x00,
0x00,0x00,0xf8,0x00,0xf8,0x20,0x20,0x20,
0x00,0x00,0x00,0xf8,0x50,0x50,0x50,0x50,
0x50,0x50,0x50,0x78,0x00,0x00,0x00,0x00,
0x20,0x20,0x38,0x20,0x38,0x00,0x00,0x00,
0x00,0x00,0x38,0x20,0x38,0x20,0x20,0x20,
0x00,0x00,0x00,0x78,0x50,0x50,0x50,0x50,
0x50,0x50,0x50,0xf8,0x50,0x50,0x50,0x50,
0x20,0x20,0xf8,0x20,0xf8,0x20,0x20,0x20,
0x20,0x20,0x20,0xe0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x38,0x20,0x20,0x20,0x20,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0x00,0x00,0x00,0x00,0xf8,0xf8,0xf8,0xf8,
0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,
0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
0xf8,0xf8,0xf8,0xf8,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x68,0x90,0x90,0x68,0x00,
0x00,0x60,0x90,0xf0,0x90,0x90,0xe0,0x80,
0x00,0x70,0x40,0x40,0x40,0x40,0x40,0x00,
0x00,0x00,0x70,0x50,0x50,0x50,0x50,0x00,
0x00,0xf8,0x48,0x20,0x40,0x88,0xf8,0x00,
0x00,0x00,0x78,0x90,0x90,0x90,0x60,0x00,
0x00,0x00,0x00,0x90,0x90,0x90,0xe8,0x80,
0x00,0x98,0x50,0x20,0x20,0x20,0x20,0x00,
0x00,0x20,0x20,0x70,0x88,0x70,0x20,0x20,
0x00,0x00,0x70,0x88,0xf8,0x88,0x70,0x00,
0x00,0x00,0x70,0x88,0x88,0x50,0xd8,0x00,
0x60,0x80,0x40,0x60,0x90,0x90,0x60,0x00,
0x00,0x00,0x00,0x70,0xa8,0xa8,0x70,0x00,
0x00,0x00,0x08,0x70,0xa8,0x48,0xb0,0x00,
0x00,0x30,0x40,0x70,0x40,0x40,0x30,0x00,
0x00,0x60,0x90,0x90,0x90,0x90,0x90,0x00,
0x00,0x00,0xf0,0x00,0xf0,0x00,0xf0,0x00,
0x00,0x00,0x20,0xf8,0x20,0x00,0xf8,0x00,
0x00,0x40,0x20,0x10,0x20,0x40,0xf0,0x00,
0x00,0x10,0x20,0x40,0x20,0x10,0x70,0x00,
0x00,0x00,0x18,0x28,0x20,0x20,0x20,0x20,
0x20,0x20,0x20,0x20,0xa0,0xc0,0x00,0x00,
0x00,0x00,0x60,0x00,0xf0,0x00,0x60,0x00,
0x00,0x00,0x50,0xa0,0x00,0x50,0xa0,0x00,
0x00,0x00,0x20,0x50,0x20,0x00,0x00,0x00,
0x00,0x00,0x00,0x60,0x60,0x00,0x00,0x00,
0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,
0x00,0x00,0x18,0x10,0x20,0xa0,0x40,0x00,
0x00,0x60,0x50,0x50,0x00,0x00,0x00,0x00,
0x00,0x60,0x10,0x20,0x70,0x00,0x00,0x00,
0x00,0x00,0x00,0x70,0x70,0x70,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

    size_t size = sizeof(data) / sizeof(data[0]);

    // Rotate the array 90 degrees counter-clockwise
    rotateArray90CounterClockwise(data, size);

    // Print the rotated array (for verification)
    std::cout << "Rotated Data:" << std::endl;
    for (size_t i = 0; i < size; i++) {
        std::cout << std::hex << "0x" << (int)data[i] << " ";
        if ((i + 1) % 8 == 0) {
            std::cout << std::endl;
        }
    }

    // Write rotated data to a file
    writeToFile(data, size, "rotated_output.txt");

    return 0;
}